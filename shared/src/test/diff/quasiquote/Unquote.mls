:NewParser

code"1 +1"
//│ res: Code[int, ?]
//│    = [ 'App', '+', [ '_', 1 ], [ '_', 1 ] ]

z +
 1
//│ ╔══[ERROR] identifier not found: z
//│ ║  l.7: 	z +
//│ ╙──     	^
//│ res: int
//│ Code generation encountered an error:
//│   unresolved symbol z


code"1
 +1"
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.17: 	code"1
//│ ║        	     ^
//│ ║  l.18: 	 +1"
//│ ║        	^^
//│ ╟── integer literal of type `1` is not a 1-element tuple
//│ ║  l.17: 	code"1
//│ ╙──      	     ^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.17: 	code"1
//│ ║        	     ^
//│ ║  l.18: 	 +1"
//│ ║        	^^^
//│ ╟── integer literal of type `1` is not a 1-element tuple
//│ ║  l.18: 	 +1"
//│ ╙──      	  ^
//│ res: Code[error | int, ?]
//│ Code generation encountered an error:
//│   missing implementation: App(App(Var(+), IntLit(1)), IntLit(1))


code"z + 1"
//│ res: Code[int, ?]
//│    = [ 'App', '+', [ 'Var', [ 'FreeVar', 'z' ] ], [ '_', 1 ] ]


code"z +
 1"
//│ res: Code[int, ?]
//│    = [ 'App', '+', [ 'Var', [ 'FreeVar', 'z' ] ], [ 'Blk', [ '_', 1 ] ] ]


code"z +
1"
//│ ╔══[PARSE ERROR] Unexpected newline in expression position
//│ ║  l.51: 	code"z +
//│ ║        	        ^
//│ ║  l.52: 	1"
//│ ╙──      	
//│ res: Code[int, ?]
//│    = [ 'App', '+', [ 'Var', [ 'FreeVar', 'z' ] ], [ '_', 1 ] ]


fun f(x, y) = code"[${x}, ${y}]"
//│ f: (Code['a, ?], Code['b, ?],) -> Code[('a, 'b,), ?]
//│  = [Function: f]

let x = code"y"
//│ x: Code[nothing, ?]
//│  = [ 'Var', [ 'FreeVar', 'y' ] ]

let c = f(x, x)
//│ c: Code[(nothing, nothing,), ?]
//│  = [ 'Bra', [ 'Tup', [ [Array], [Array] ] ] ]

code"y"
y => code"[${code"y"}, ${code"y"}]"
//│ res: Code[nothing, ?]
//│    = [ 'Var', [ 'FreeVar', 'y' ] ]
//│ res: 'a -> Code[('a, 'a,), ?]
//│    = [Function: res]

code"y => ${c}"
//│ res: Code[anything -> (nothing, nothing,), ?]
//│    = [ '_', [Function (anonymous)] ]


fun f(x, y) = [code"[${x}, ${y}]", x, y]
//│ f: (Code['a, ?] & 'b, Code['c, ?] & 'd,) -> (Code[('a, 'c,), ?], 'b, 'd,)
//│  = [Function: f1]

let a: Code<int, {z: int}>
//│ a: Code[int, {z: int}]
//│  = <missing implementation>


fun f(x) = x
//│ f: 'a -> 'a
//│  = [Function: f2]

code"f(0)"
//│ res: Code[0, ?]
//│    = [ 'App_Fun', [ 'Var', [ 'FreeVar', 'f' ] ], [ 'Tup', [ [Array] ] ] ]
code"${a + b} + 10"
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.102: 	code"${a + b} + 10"
//│ ║         	       ^^^
//│ ╟── type `code & {Code#C :> {z: int}, Code#T <: int}` is not an instance of type `int`
//│ ║  l.90: 	let a: Code<int, {z: int}>
//│ ║        	       ^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.102: 	code"${a + b} + 10"
//│ ╙──       	       ^
//│ ╔══[ERROR] identifier not found: b
//│ ║  l.102: 	code"${a + b} + 10"
//│ ╙──       	           ^
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.102: 	code"${a + b} + 10"
//│ ║         	     ^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `code`
//│ ║  l.102: 	code"${a + b} + 10"
//│ ╙──       	       ^^^^^
//│ res: Code[int, ?]
//│    = <no result>
//│      a is not implemented


code"let a = 1; let b = 3; ${code"b + ${code"1"}"} + 1"
//│ res: Code[int, ?]
//│    = [
//│        'Let',
//│        'a',
//│        Symbol(a),
//│        [ '_', 1 ],
//│        [
//│          'Let',
//│          'b',
//│          Symbol(b),
//│          [ '_', 3 ],
//│          [ 'App', '+', [Array], [Array] ]
//│        ]
//│      ]



let n = 1
code"${Const(n)} + 1"
//│ n: 1
//│  = 1
//│ res: Code[int, ?]
//│    = [ 'App', '+', [ 'Unquoted', [ '_', 1 ] ], [ '_', 1 ] ]


code"let a = 1; let b = 3"
//│ res: Code[undefined, ?]
//│    = [
//│        'Let',
//│        'a',
//│        Symbol(a),
//│        [ '_', 1 ],
//│        [ 'Let', 'b', Symbol(b), [ '_', 3 ], [ '_', undefined ] ]
//│      ]


code"let a = 1; 
let b = 3"
//│ ╔══[PARSE ERROR] Unexpected newline in expression position
//│ ║  l.163: 	code"let a = 1; 
//│ ║         	                ^
//│ ║  l.164: 	let b = 3"
//│ ╙──       	
//│ res: Code[undefined, ?]
//│    = [
//│        'Let',
//│        'a',
//│        Symbol(a),
//│        [ '_', 1 ],
//│        [ 'Let', 'b', Symbol(b), [ '_', 3 ], [ '_', undefined ] ]
//│      ]



code"let x = 1; ${y
}
"
//│ res: Code[nothing, ?]
//│ Code generation encountered an error:
//│   unresolved symbol y

code"'''hello'''"
//│ res: Code[nothing, ?]
//│ Syntax error:
//│   Unexpected string

class Foo(
x
) 
let f = new Foo(
5)
//│ ╔══[PARSE ERROR] Unexpected identifier here
//│ ║  l.199: 	x
//│ ╙──       	^
//│ ╔══[PARSE ERROR] Unexpected literal here
//│ ║  l.202: 	5)
//│ ╙──       	^
//│ Defined class Foo
//│ Foo: () -> Foo
//│    = [Function: Foo1]
//│ f: Foo
//│  = Foo {}
